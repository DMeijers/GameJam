// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using UnityEngine;
	using Coherence.Toolkit;
	using Coherence.Toolkit.Bindings;
	using Coherence.Entity;
	using Coherence.ProtocolDef;
	using Coherence.Brook;
	using Coherence.Toolkit.Bindings.ValueBindings;
	using Coherence.Toolkit.Bindings.TransformBindings;
	using Coherence.Connection;
	using Coherence.Log;
	using Logger = Coherence.Log.Logger;
	using UnityEngine.Scripting;

	public class Binding_6d57491473fb68a4a87f6eca2180c0d4_1bddc179_aa70_46b9_b129_d3123e91f180 : BoolAnimatorParameterBinding
	{
		private UnityEngine.Animator CastedUnityComponent;		

		protected override void OnBindingCloned()
		{
			CastedUnityComponent = (UnityEngine.Animator)UnityComponent;
		}
		public override string CoherenceComponentName => "PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149";

		public override uint FieldMask => 0b00000000000000000000000000000001;

		public override bool Value
		{
			get => (bool)(CastedUnityComponent.GetBool(CastedDescriptor.ParameterHash));
			set => CastedUnityComponent.SetBool(CastedDescriptor.ParameterHash, (value));
		}

		protected override bool ReadComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149)coherenceComponent;
			return update.IsMoving;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149)coherenceComponent;
			update.IsMoving = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149();
		}
	}

	public class Binding_6d57491473fb68a4a87f6eca2180c0d4_76ec269b_54fa_4e06_9197_073eac35d094 : BoolAnimatorParameterBinding
	{
		private UnityEngine.Animator CastedUnityComponent;		

		protected override void OnBindingCloned()
		{
			CastedUnityComponent = (UnityEngine.Animator)UnityComponent;
		}
		public override string CoherenceComponentName => "PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149";

		public override uint FieldMask => 0b00000000000000000000000000000010;

		public override bool Value
		{
			get => (bool)(CastedUnityComponent.GetBool(CastedDescriptor.ParameterHash));
			set => CastedUnityComponent.SetBool(CastedDescriptor.ParameterHash, (value));
		}

		protected override bool ReadComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149)coherenceComponent;
			return update.GoingLeft;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149)coherenceComponent;
			update.GoingLeft = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149();
		}
	}

	public class Binding_6d57491473fb68a4a87f6eca2180c0d4_3505f0c8_e79f_4ad8_8777_4eeb5f0b1e8f : BoolAnimatorParameterBinding
	{
		private UnityEngine.Animator CastedUnityComponent;		

		protected override void OnBindingCloned()
		{
			CastedUnityComponent = (UnityEngine.Animator)UnityComponent;
		}
		public override string CoherenceComponentName => "PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149";

		public override uint FieldMask => 0b00000000000000000000000000000100;

		public override bool Value
		{
			get => (bool)(CastedUnityComponent.GetBool(CastedDescriptor.ParameterHash));
			set => CastedUnityComponent.SetBool(CastedDescriptor.ParameterHash, (value));
		}

		protected override bool ReadComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149)coherenceComponent;
			return update.GoingRight;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149)coherenceComponent;
			update.GoingRight = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149();
		}
	}

	public class Binding_6d57491473fb68a4a87f6eca2180c0d4_064cf339_acfa_46a1_bb5e_fbe7275c3722 : BoolAnimatorParameterBinding
	{
		private UnityEngine.Animator CastedUnityComponent;		

		protected override void OnBindingCloned()
		{
			CastedUnityComponent = (UnityEngine.Animator)UnityComponent;
		}
		public override string CoherenceComponentName => "PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149";

		public override uint FieldMask => 0b00000000000000000000000000001000;

		public override bool Value
		{
			get => (bool)(CastedUnityComponent.GetBool(CastedDescriptor.ParameterHash));
			set => CastedUnityComponent.SetBool(CastedDescriptor.ParameterHash, (value));
		}

		protected override bool ReadComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149)coherenceComponent;
			return update.GoingBack;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149)coherenceComponent;
			update.GoingBack = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149();
		}
	}


	[Preserve]
	[AddComponentMenu("coherence/Baked/Baked 'PlayerHuman' (auto assigned)")]
	[RequireComponent(typeof(CoherenceSync))]
	public class CoherenceSyncPlayerHuman_id0 : CoherenceSyncBaked
	{
		private CoherenceSync coherenceSync;
		private Logger logger;

		// Cached targets for commands
		private InputBuffer<PlayerHuman> inputBuffer;
		private PlayerHuman currentInput;
		private long lastAddedFrame = -1;
		private CoherenceInput coherenceInput;
		private long currentSimulationFrame => coherenceInput.CurrentSimulationFrame;

		private IClient client;
		private CoherenceMonoBridge monoBridge => coherenceSync.MonoBridge;

		protected void Awake()
		{
			coherenceSync = GetComponent<CoherenceSync>();
			coherenceSync.usingReflection = false;

			logger = coherenceSync.logger.With<CoherenceSyncPlayerHuman_id0>();
			coherenceInput = coherenceSync.Input;
			inputBuffer = new InputBuffer<PlayerHuman>(coherenceInput.InitialBufferSize, coherenceInput.InitialBufferDelay, coherenceInput.UseFixedSimulationFrames);
			if (coherenceSync.TryGetBindingByGuid("1bddc179-aa70-46b9-b129-d3123e91f180", "IsMoving", out Binding InternalPlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_IsMoving))
			{
				var clone = new Binding_6d57491473fb68a4a87f6eca2180c0d4_1bddc179_aa70_46b9_b129_d3123e91f180();
				InternalPlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_IsMoving.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalPlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_IsMoving)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (UnityEngine.Animator).IsMoving");
			}
			if (coherenceSync.TryGetBindingByGuid("76ec269b-54fa-4e06-9197-073eac35d094", "GoingLeft", out Binding InternalPlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_GoingLeft))
			{
				var clone = new Binding_6d57491473fb68a4a87f6eca2180c0d4_76ec269b_54fa_4e06_9197_073eac35d094();
				InternalPlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_GoingLeft.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalPlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_GoingLeft)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (UnityEngine.Animator).GoingLeft");
			}
			if (coherenceSync.TryGetBindingByGuid("3505f0c8-e79f-4ad8-8777-4eeb5f0b1e8f", "GoingRight", out Binding InternalPlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_GoingRight))
			{
				var clone = new Binding_6d57491473fb68a4a87f6eca2180c0d4_3505f0c8_e79f_4ad8_8777_4eeb5f0b1e8f();
				InternalPlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_GoingRight.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalPlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_GoingRight)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (UnityEngine.Animator).GoingRight");
			}
			if (coherenceSync.TryGetBindingByGuid("064cf339-acfa-46a1-bb5e-fbe7275c3722", "GoingBack", out Binding InternalPlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_GoingBack))
			{
				var clone = new Binding_6d57491473fb68a4a87f6eca2180c0d4_064cf339_acfa_46a1_bb5e_fbe7275c3722();
				InternalPlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_GoingBack.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalPlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_PlayerHuman_id0_UnityEngine__char_46_Animator_5819893876217580149_GoingBack)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (UnityEngine.Animator).GoingBack");
			}
		}

		public override List<ICoherenceComponentData> CreateEntity()
		{
			if (coherenceSync.UsesLODsAtRuntime && (Archetypes.IndexForName.TryGetValue(coherenceSync.Archetype.ArchetypeName, out int archetypeIndex)))
			{
				var components = new List<ICoherenceComponentData>()
				{
					new ArchetypeComponent
					{
						index = archetypeIndex
					}
				};

				return components;
			}
			else
			{
				logger.Warning($"Unable to find archetype {coherenceSync.Archetype.ArchetypeName} in dictionary. Please, bake manually (coherence > Bake)");
			}

			return null;
		}
		private void OnDestroy()
		{
			if (monoBridge != null)
			{
				monoBridge.OnLateFixedNetworkUpdate -= SendInputState;
			}
		}

		public override void Initialize(CoherenceSync sync, IClient client)
		{
			if (coherenceSync == null)
			{
				coherenceSync = sync;
			}
			this.client = client;
			sync.Input.internalSetButtonState = SetButtonState;
			sync.Input.internalSetButtonRangeState = SetButtonRangeState;
			sync.Input.internalSetAxisState = SetAxisState;
			sync.Input.internalSetStringState = SetStringState;
			sync.Input.internalGetButtonState = GetButtonState;
			sync.Input.internalGetButtonRangeState = GetButtonRangeState;
			sync.Input.internalGetAxisState = GetAxisState;
			sync.Input.internalGetStringState = GetStringState;
			sync.Input.internalRequestBuffer = () => inputBuffer;
			sync.Input.internalOnInputReceived += OnInput;
			sync.Input.internalRequestBuffer = () => inputBuffer;

			if (coherenceInput.UseFixedSimulationFrames)
			{
				sync.MonoBridge.OnLateFixedNetworkUpdate += SendInputState;
			}
		}

		public override void ReceiveCommand(IEntityCommand command)
		{
			switch(command)
			{
				default:
					logger.Warning($"[CoherenceSyncPlayerHuman_id0] Unhandled command: {command.GetType()}.");
					break;
			}
		}

		private void SetButtonState(string name, bool value)
		{
			switch(name)
			{
				default:
					logger.Error($"No input button of name: {name}");
					break;
			}
		}

		private void SetButtonRangeState(string name, float value)
		{
			switch(name)
			{
			default:
				logger.Error($"No input button range of name: {name}");
				break;
			}
		}

		private void SetAxisState(string name, Vector2 value)
		{
			switch(name)
			{
			default:
				logger.Error($"No input axis of name: {name}");
				break;
			}
		}

		private void SetStringState(string name, string value)
		{
			switch(name)
			{
				default:
					logger.Error($"No input button of name: {name}");
					break;
			}
		}

		public override void SendInputState()
		{
			if (!coherenceInput.IsProducer || !coherenceInput.IsReadyToProcessInputs || !coherenceInput.IsInputOwner)
			{
				return;
			}

			if (lastAddedFrame != currentSimulationFrame)
			{
				inputBuffer.AddInput(currentInput, currentSimulationFrame);
				lastAddedFrame = currentSimulationFrame;
			}

			while (inputBuffer.DequeueForSending(currentSimulationFrame, out long frameToSend, out PlayerHuman input, out bool differs))
			{
				coherenceInput.DebugOnInputSent(frameToSend, input);
				client.SendInput(input, frameToSend, coherenceSync.EntityID);
			}
		}

		private bool ShouldPollCurrentInput(long frame)
		{
			return coherenceInput.IsProducer && coherenceInput.Delay == 0 && frame == currentSimulationFrame;
		}

		private bool GetButtonState(string name, long? simulationFrame)
		{
			long frame = simulationFrame.GetValueOrDefault(currentSimulationFrame);

			switch(name)
			{
				default:
					logger.Error($"No input button of name: {name}");
					break;
			}

			return false;
		}

		private float GetButtonRangeState(string name, long? simulationFrame)
		{
			long frame = simulationFrame.GetValueOrDefault(currentSimulationFrame);

			switch(name)
			{
			default:
				logger.Error($"No input button range of name: {name}");
				break;
			}

			return 0f;
		}

		private Vector2 GetAxisState(string name, long? simulationFrame)
		{
			long frame = simulationFrame.GetValueOrDefault(currentSimulationFrame);

			switch(name)
			{
			default:
				logger.Error($"No input axis of name: {name}");
				break;
			}

			return Vector2.zero;
		}

		private string GetStringState(string name, long? simulationFrame)
		{
			long frame = simulationFrame.GetValueOrDefault(currentSimulationFrame);

			switch(name)
			{
				default:
					logger.Error($"No input button of name: {name}");
					break;
			}

			return null;
		}

		private void OnInput(IEntityInput entityInput, long frame)
		{
			var input = (PlayerHuman)entityInput;
			coherenceInput.DebugOnInputReceived(frame, entityInput);
			inputBuffer.ReceiveInput(input, frame);
		}
	}
}
